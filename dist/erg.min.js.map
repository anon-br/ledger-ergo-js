{"version":3,"file":"erg.min.js","sources":["../src/erg.ts"],"sourcesContent":["const CLA = 0xE0;\r\n\r\nconst ERROR_CODES = {\r\n    0x6985: \"Operation denied by user\",\r\n    0x6A86: \"Incorrect P1 or P2\",\r\n    0x6A87: \"Bad APDU length\",\r\n    0x6D00: \"Instruction isn't supported\",\r\n    0x6E00: \"CLA is not supported\",\r\n    0xB000: \"Device is busy\",\r\n    0xB001: \"Wrong response length\",\r\n    0xB002: \"Bad session id\",\r\n    0xB003: \"Unknown subcommand\",\r\n    0xB0FF: \"Bad state (check order of calls and errors)\",\r\n    0xE001: \"Bad token ID\",\r\n    0xE002: \"Bad token value\",\r\n    0xE003: \"Bad context extension size\",\r\n    0xE004: \"Bad data input ID\",\r\n    0xE005: \"Bad box ID\",\r\n    0xE006: \"Bad token index\",\r\n    0xE007: \"Bad frame index\",\r\n    0xE008: \"Bad input count\",\r\n    0xE009: \"Bad output count\",\r\n    0xE00A: \"Too many tokens\",\r\n    0xE00B: \"Too many inputs\",\r\n    0xE00C: \"Too many data inputs\",\r\n    0xE00D: \"Too many input frames\",\r\n    0xE00E: \"Too many outputs\",\r\n    0xE00F: \"Hasher internal error\",\r\n    0xE010: \"Buffer internal error\",\r\n    0xE011: \"UInt64 overflow\",\r\n    0xE012: \"Bad Bip32 path\",\r\n    0xE013: \"Internal crypto engine error\",\r\n    0xE014: \"Not enough data\",\r\n    0xE015: \"Too much data\",\r\n    0xE016: \"Address generation failed\",\r\n    0xE017: \"Schnorr signing failed\",\r\n    0xE018: \"Bad frame signature\",\r\n    0xE101: \"Can't display Bip32 path\",\r\n    0xE102: \"Can't display address\",\r\n    0xFFFF: \"Stack overflow\"\r\n};\r\n\r\nconst COMMANDS = {\r\n    app_version: 0x01,\r\n    app_name: 0x02,\r\n    extented_pub_key: 0x10,\r\n    derive_address: 0x11,\r\n    attest_input: 0x20,\r\n    sign_tx: 0x21\r\n}\r\n\r\nclass DeviceError extends Error {\r\n    private _code: number;\r\n\r\n    constructor(code: number) {\r\n        const message = (ERROR_CODES as any)[code] || \"Unknown error\";\r\n        super(message);\r\n        this._code = code;\r\n    }\r\n}\r\n\r\nimport type Transport from '@ledgerhq/hw-transport-node-hid';\r\nimport HidTransport from '@ledgerhq/hw-transport-node-hid';\r\n\r\nexport default class ErgoLedgerApp {\r\n    private _transport: Transport;\r\n\r\n    constructor(transport: Transport) {\r\n        this._transport = transport;\r\n    }\r\n\r\n    public async command(code: number, p1: number, p2: number, data: any): Promise<Buffer> {\r\n        if (data.length > 255) {\r\n            throw new DeviceError(0xE015); // Too much data\r\n        }\r\n        let header = Buffer.alloc(5);\r\n        header.writeUInt8(CLA, 0);\r\n        header.writeUInt8(code, 1);\r\n        header.writeUInt8(p1, 2);\r\n        header.writeUInt8(p2, 3);\r\n        header.writeUInt8(data.length, 4);\r\n        const response = await this._transport.exchange(Buffer.concat([header, data]))\r\n        if (response.length < 2) {\r\n            throw new DeviceError(0xB001); // Wrong response length\r\n        }\r\n        const returnCode = response.readUInt16BE(response.length - 2);\r\n        if (returnCode != 0x9000) {\r\n            throw new DeviceError(returnCode); // Call error\r\n        }\r\n        return response.slice(0, response.length - 2);\r\n    }\r\n\r\n    public async data(code: number, p1: number, p2: number, data: any): Promise<Buffer[]> {\r\n        let responses: Buffer[] = []\r\n        for (let i = 0; i < Math.ceil(data.length / 255); i++) {\r\n            const chunk = data.slice(i * 255, Math.min((i + 1) * 255, data.length));\r\n            const response = await this.command(code, p1, p2, chunk)\r\n            responses.push(response)\r\n        }\r\n\r\n        return responses;\r\n    }\r\n\r\n    public async getAppVersion(): Promise<Buffer> {\r\n        return this.command(COMMANDS.app_version, 0x00, 0x00, Buffer.from([]))\r\n    }\r\n\r\n    public async getAppName(): Promise<string> {\r\n        return this.command(COMMANDS.app_name, 0x00, 0x00, Buffer.from([]))\r\n            .then(buff => buff.toString('ascii'))\r\n    }\r\n}\r\n\r\n// exports.CLA = CLA;\r\n// exports.Device = Device;\r\n// exports.DeviceError = DeviceError;\r\n// exports.COMMANDS = COMMANDS;\r\n// exports.ERROR_CODES = ERROR_CODES;"],"names":["CLA","ERROR_CODES","COMMANDS","app_version","app_name","extented_pub_key","derive_address","attest_input","sign_tx","code","message","_this","_super","_code","__extends","Error","transport","this","_transport","ErgoLedgerApp","p1","p2","data","length","DeviceError","header","Buffer","alloc","writeUInt8","exchange","concat","response","_a","returnCode","readUInt16BE","slice","responses","i","Math","ceil","chunk","min","command","push","from","then","buff","toString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAAMA,IAAM,IAENC,YAAc,CAChB,MAAQ,2BACR,MAAQ,qBACR,MAAQ,kBACR,MAAQ,8BACR,MAAQ,uBACR,MAAQ,iBACR,MAAQ,wBACR,MAAQ,iBACR,MAAQ,qBACR,MAAQ,8CACR,MAAQ,eACR,MAAQ,kBACR,MAAQ,6BACR,MAAQ,oBACR,MAAQ,aACR,MAAQ,kBACR,MAAQ,kBACR,MAAQ,kBACR,MAAQ,mBACR,MAAQ,kBACR,MAAQ,kBACR,MAAQ,uBACR,MAAQ,wBACR,MAAQ,mBACR,MAAQ,wBACR,MAAQ,wBACR,MAAQ,kBACR,MAAQ,iBACR,MAAQ,+BACR,MAAQ,kBACR,MAAQ,gBACR,MAAQ,4BACR,MAAQ,yBACR,MAAQ,sBACR,MAAQ,2BACR,MAAQ,wBACR,MAAQ,kBAGNC,SAAW,CACbC,YAAa,EACbC,SAAU,EACVC,iBAAkB,GAClBC,eAAgB,GAChBC,aAAc,GACdC,QAAS,4BAMT,WAAYC,GAAZ,WACUC,EAAWT,YAAoBQ,IAAS,wBAC9CE,EAAAC,YAAMF,UACDG,MAAQJ,IAErB,OAR0BK,kBAAAC,gCAgBtB,WAAYC,GACRC,KAAKC,WAAaF,GA2C1B,OAxCiBG,oBAAb,SAAqBV,EAAcW,EAAYC,EAAYC,yHACvD,GAAIA,EAAKC,OAAS,IACd,MAAM,IAAIC,YAAY,OAQT,QANbC,EAASC,OAAOC,MAAM,IACnBC,WAAW5B,IAAK,GACvByB,EAAOG,WAAWnB,EAAM,GACxBgB,EAAOG,WAAWR,EAAI,GACtBK,EAAOG,WAAWP,EAAI,GACtBI,EAAOG,WAAWN,EAAKC,OAAQ,MACRN,KAAKC,WAAWW,SAASH,OAAOI,OAAO,CAACL,EAAQH,aACvE,IADMS,EAAWC,UACJT,OAAS,EAClB,MAAM,IAAIC,YAAY,OAG1B,GAAkB,QADZS,EAAaF,EAASG,aAAaH,EAASR,OAAS,IAEvD,MAAM,IAAIC,YAAYS,GAE1B,UAAOF,EAASI,MAAM,EAAGJ,EAASR,OAAS,YAGlCJ,iBAAb,SAAkBV,EAAcW,EAAYC,EAAYC,2HAChDc,EAAsB,GACjBC,EAAI,0BAAGA,EAAIC,KAAKC,KAAKjB,EAAKC,OAAS,MAClCiB,EAAQlB,EAAKa,MAAU,IAAJE,EAASC,KAAKG,IAAc,KAATJ,EAAI,GAAUf,EAAKC,YACxCN,KAAKyB,QAAQjC,EAAMW,EAAIC,EAAImB,kBAA5CT,EAAWC,SACjBI,EAAUO,KAAKZ,2BAH+BM,iBAMlD,UAAOD,WAGEjB,0BAAb,gGACI,UAAOF,KAAKyB,QAAQxC,SAASC,YAAa,EAAM,EAAMuB,OAAOkB,KAAK,aAGzDzB,uBAAb,gGACI,UAAOF,KAAKyB,QAAQxC,SAASE,SAAU,EAAM,EAAMsB,OAAOkB,KAAK,KAC1DC,MAAK,SAAAC,GAAQ,OAAAA,EAAKC,SAAS;;;;;;;;"}